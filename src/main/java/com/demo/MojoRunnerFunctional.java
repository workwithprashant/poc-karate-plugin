package com.demo;


import org.apache.maven.execution.MavenSession;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.BuildPluginManager;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugins.annotations.*;
import org.apache.maven.project.MavenProject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;

import static org.twdata.maven.mojoexecutor.MojoExecutor.*;

/**
 * Execute Runner Functional Test
 *
 * @author workwithprashant @gmail.com
 */
//@Mojo(name = "functionaltest", defaultPhase = LifecyclePhase.PROCESS_SOURCES)
@Mojo(name = "functionaltest", requiresProject = false, defaultPhase = LifecyclePhase.PROCESS_SOURCES, requiresDependencyResolution = ResolutionScope.COMPILE, threadSafe = true)
public class MojoRunnerFunctional
        extends AbstractMojo {

    /* Initialize the logger */
    private static final Logger log = LoggerFactory.getLogger(MojoRunnerFunctional.class);

    /**
     * Autogenerated by Maven using POM.xml
     */
    @Parameter(defaultValue = "${project}", readonly = true)
    private MavenProject mavenProject;

    /**
     * Autogenerated by Maven using POM.xml
     */
    @Parameter(defaultValue = "${session}", readonly = true)
    private MavenSession mavenSession;

    /**
     * Autogenerated by Maven using POM.xml
     */
    @Component
    private BuildPluginManager pluginManager;

    @Parameter(property = "test", required = true)
    private String test;

    /**
     * Perform whatever build-process behavior this Mojo implements.
     * This is the main trigger for the Mojo inside the Maven system, and
     * allows the Mojo to communicate fatal errors by throwing an instance of MojoExecutionException.
     *
     * @throws MojoExecutionException Mojo Execution Exception
     */
    @Override
    public void execute()
            throws MojoExecutionException {
        log.trace("Starting MojoRunnerFunctional execute");

        try {
            log.trace("Starting MojoRunnerFunctional try block");

            MojoHelper.unpackTestArtifacts(mavenProject, mavenSession, pluginManager);

            /* Executes build plugins similar way as it does through pom.xml
             * Following plugin is used to execute functional tests
             */
            Element[] pluginConfig = getSurefirePluginConfigurationParameters().toArray(new Element[0]);
            executeMojo(
                    plugin(
                            groupId("org.apache.maven.plugins"),
                            artifactId("maven-surefire-plugin"),
                            version("2.22.2")
                    ),
                    goal("test"),
                    configuration(pluginConfig),
                    executionEnvironment(
                            mavenProject,
                            mavenSession,
                            pluginManager
                    )
            );
        } catch (Exception e) {
            throw new MojoExecutionException("Error running tests due to ", e);
        }
    }

    /**
     * Gets surefire plugin configuration parameters.
     *
     * @return the surefire plugin configuration parameters
     */
    public List<Element> getSurefirePluginConfigurationParameters() {
        ArrayList<Element> configuration = new ArrayList<>();
        configuration.add(new Element("includes", element("include", test)));
        configuration.add(new Element("failIfNoTests", "true"));
        return configuration;
    }

}